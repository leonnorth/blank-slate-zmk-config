/*
 * Copyright (c) 2022 Pete Johanson
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define QWERTY_BASE 1

// #define TBLE_ORTHO   1
#define TBLE_MIT     1
// #define TBLE_DUAL_2U 1

#define NAV_L 1
#define NUM_L 2
#define UMLAUTE_L 3
#define UMLAUTE_UPPER_L 4

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
&lt { quick_tap_ms = <200>; };

#define BT(n) BT_SEL n

/ {
    chosen {
       zmk,matrix_transform =
#ifdef TBLE_DUAL_2U
                       &dual_2u_transform;
#elif defined(TBLE_MIT)
                       &mit_transform;
#else
                       &ortho_transform;
#endif
    };

    macros {
	sz: sz {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LALT>
                , <&macro_tap &kp KP_N0 &kp KP_N2 &kp KP_N2 &kp KP_N3>
                , <&macro_release &kp LALT>
                ;
        };
	ae_lower: a_umlaute_lower {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LALT>
                , <&macro_tap &kp KP_N0 &kp KP_N2 &kp KP_N2 &kp KP_N8>
                , <&macro_release &kp LALT>
                ;
        };
	oe_lower: o_umlaute_lower {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LALT>
                , <&macro_tap &kp KP_N0 &kp KP_N2 &kp KP_N4 &kp KP_N6>
                , <&macro_release &kp LALT>
                ;
        };
	ue_lower: u_umlaute_lower {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LALT>
                , <&macro_tap &kp KP_N0 &kp KP_N2 &kp KP_N5 &kp KP_N2>
                , <&macro_release &kp LALT>
                ;
        };
	ae_upper: a_umlaute_upper {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LALT>
                , <&macro_tap &kp KP_N0 &kp KP_N1 &kp KP_N9 &kp KP_N6>
                , <&macro_release &kp LALT>
                ;
        };
	oe_upper: o_umluate_upper {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LALT>
                , <&macro_tap &kp KP_N0 &kp KP_N2 &kp KP_N1 &kp KP_N4>
                , <&macro_release &kp LALT>
                ;
        };
	ue_upper: u_umlaute_upper {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LALT>
                , <&macro_tap &kp KP_N0 &kp KP_N2 &kp KP_N2 &kp KP_N0>
                , <&macro_release &kp LALT>
                ;
        };
    };
    
    tap_dances {
    	shifty: shift_caps_word {
		compatible = "zmk,behavior-tap-dance";
		label = "TD_SHIFTY";
		#binding-cells = <0>;
		tapping-term-ms = <150>;
		bindings = <&kp LSHFT>, <&caps_word>;
	};
    };

    behaviors {
        hold_tap_shft_ret: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP";
            bindings = <&kp>, <&kp>;
            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

// Conditional layer only when we have less thumb keys
#ifdef TBLE_DUAL_2U
    cond_layers {
        compatible = "zmk,conditional-layers";
	tri {
	    if-layers = <NUM_L NAV_L>;
	    then-layer = <SYM_L>;
        };
    };
#endif

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "Base";
            bindings = <
 &kp TAB    &kp Q      &kp W      &kp E         &kp R          &kp T          &kp Y            &kp U          &kp I       &kp O      &kp P         &kp BKSP
 &kp ESC    &kp A      &kp S      &kp D         &kp F          &kp G          &kp H            &kp J          &kp K       &kp L      &kp SEMI      &kp QUOT
 &kp LSHFT  &kp Z      &kp X      &kp C         &kp V          &kp B          &kp N            &kp M          &kp COMMA   &kp DOT    &kp FSLH      &hold_tap_shft_ret RSHFT RET
 &kp LCTRL  &kp LGUI   &kp LALT   &mo UMLAUTE_L &mo NAV_L          &kp SPACE                   &mo NUM_L      &kp LEFT    &kp DOWN   &kp UP        &kp RIGHT
            >;
        };

        nav_layer {
            label = "Nav";
            bindings = <
&kp TILDE  &kp EXCLAMATION  &kp AT_SIGN  &kp HASH   &kp DOLLAR  &kp PERCENT  &kp CARET  &kp AMPERSAND   &kp ASTERISK    &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp DEL
&kp F1     &kp F2           &kp F3       &kp F4     &kp F5      &kp F6       &trans     &kp UNDERSCORE  &kp PLUS        &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp PIPE
&kp F7     &kp F8           &kp F9       &kp F10    &kp F11     &kp F12      &trans     &trans          &trans          &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &trans
&trans     &trans           &trans       &trans     &trans           &trans             &trans          &kp C_PREVIOUS  &kp C_VOLUME_DOWN     &kp C_VOLUME_UP        &kp C_PLAY_PAUSE
            >;
        };

        num_layer {
            label = "Num";
            bindings = <
&kp GRAVE  &kp N1     &kp N2   &kp N3  &kp N4    &kp N5     &kp N6      &kp N7     &kp N8      &kp N9            &kp N0             &kp DEL
&trans     &trans     &trans   &trans  &trans    &trans     &trans      &kp MINUS  &kp EQUAL   &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &trans
&trans     &trans     &trans   &trans  &trans    &trans     &trans      &trans     &trans      &trans            &trans             &trans
&trans     &trans     &trans   &trans  &trans           &trans          &trans     &kp HOME    &kp PG_DN         &kp PG_UP          &kp END
            >;
        };

        umlaute_layer {
            label = "Umlaute";
            bindings = <
&trans              &trans     &trans    &trans    &trans    &trans    &trans    &ue_lower  &trans    &oe_lower  &trans    &trans
&trans              &ae_lower  &sz       &trans    &trans    &trans    &trans    &trans     &trans    &trans     &trans    &trans
&mo UMLAUTE_UPPER_L &trans     &trans    &trans    &trans    &trans    &trans    &trans     &trans    &trans     &trans    &mo UMLAUTE_UPPER_L
&trans              &trans     &trans    &trans    &trans         &trans         &trans     &trans    &trans     &trans    &trans
            >;
        };

        umlaute_upper_layer {
            label = "Umlaute_upper";
            bindings = <
&trans    &trans     &trans    &trans    &trans    &trans    &trans    &ue_upper  &trans    &oe_upper  &trans    &trans
&trans    &ae_upper  &sz       &trans    &trans    &trans    &trans    &trans     &trans    &trans     &trans    &trans
&trans    &trans     &trans    &trans    &trans    &trans    &trans    &trans     &trans    &trans     &trans    &trans
&trans    &trans     &trans    &trans    &trans         &bt BT_CLR     &bt BT(0)  &bt BT(1) &bt BT(2)  &bt BT(3) &bt BT(4)
            >;
        };


    };
};
